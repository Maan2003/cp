#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define PB push_back
#define SH std::cout <<
#define LN << '\n'
#define RD std::cin >>
#define va std::vector<auto>

using namespace std;
typedef std::vector<int> vi;
template <typename _A, typename _B> using umap = unordered_map<_A, _B>;
template <typename T> using v = vector<T>;

template <typename T> void RD_VC(v<T> &a, int n) {}

const std::string YES = "YES";
const std::string NO = "NO";

bool solve(int x1, int y1, int x2, int y2, int x3, int y3) {
  return // king is at the top
      y1 == 1 &&
      // none of the rooks is capturable by the king
      ((x2 - x1) > 1 || (x1 - x2) > 1) &&
      ((x3 - x1) > 1 || (x1 - x3) > 1) &&
      // one rook is the second row
      (y2 == 2 || y3 == 2)
      // and both rooks must be on different columns
      && x2 != x3;
}

bool solve2(int x1, int y1, int x2, int y2, int x3, int y3) {
  return solve(x1, y1, x2, y2, x3, y3) || solve(y1, x1, y2, x2, y3, x3);
}

// generated by oj-template v4.8.1
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int a;
  std::cin >> a;

  REP(_, a) {
    int x1, x2, y1, y2, x3, y3;
    cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;
    bool done = false;
    done |= solve2(x1, y1, x2, y2, x3, y3);
    // rotate the x1, y1 by 90 degrees about the center of the board
    done |= solve2(9 - y1, x1, 9 - y2, x2, 9 - y3, x3);
    // rotate the x1, y1 by 180 degrees about the center of the board
    done |= solve2(9 - x1, 9 - y1, 9 - x2, 9 - y2, 9 - x3, 9 - y3);
    // rotate the x1, y1 by 270 degrees about the center of the board
    done |= solve2(y1, 9 - x1, y2, 9 - x2, y3, 9 - x3);
    if (done) {
      cout << YES << '\n';
    } else {
      cout << NO << '\n';
    }
  }
  return 0;
}
