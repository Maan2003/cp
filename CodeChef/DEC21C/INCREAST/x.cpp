#include <bits/stdc++.h>
#include <climits>
#include <stack>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define PB push_back
#define SH std::cout <<
#define LN << '\n'
#define RD std::cin >>
#define va std::vector<auto>

using namespace std;
typedef std::vector<int> vi;
template <typename _A, typename _B> using umap = unordered_map<_A, _B>;
template <typename T> using v = vector<T>;

template <typename T> void RD_VC(v<T> &a, int n) {}

bool keep[1000000];

void solve(const string &a) {
  // so we maintain a stack of indices we keep at front
  stack<int> kept;
  // the first character that is not being kept
  char cl = CHAR_MAX;
  // index of cl in the string
  int cli = INT_MAX;

  for (int i = 0; i < a.size(); i++) {
    // if the current char is better than the first 
    if (a[i] <= cl) {
      // we saw good char, now lets not keep all chars that are worse than it
      while (!kept.empty() && a[kept.top()] > a[i]) {
        int idx = kept.top();
        keep[idx] = false;

        // update cl and cli - the first char that is not being kept
        if (idx < cli) {
          cli = idx;
          cl = a[idx];
        }
        kept.pop();
      }
      // keep this
      kept.push(i);
      keep[i] = true;

    } else {
      // the first char that is not being kept is better than current char
      // so lets not keep it
      keep[i] = false;

      // if this is the first char that is not being kept
      if (cl == CHAR_MAX) {
        cl = a[i];
      }
    }
  }

  // print the characters that are being kept
  for (int i = 0; i < a.size(); i++) {
    if (keep[i]) {
      cout << a[i];
    }
  }

  // print the characters that are not being kept
  for (int i = 0; i < a.size(); i++) {
    if (!keep[i]) {
      cout << a[i];
    }
  }
}

// generated by oj-template v4.8.1
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int n;
  std::cin >> n;
  std::vector<std::string> a(n);
  REP(i, n) {
    std::cin >> a[i];
    solve(a[i]);
    cout << endl;
  }
  std::cout << '\n';
  return 0;
}
