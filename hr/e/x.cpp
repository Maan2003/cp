#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define PB push_back
#define SH std::cout <<
#define LN << '\n'
#define RD std::cin >>
#define va std::vector<auto>

using namespace std;
typedef std::vector<int> vi;
template <typename _A, typename _B> using umap = unordered_map<_A, _B>;
template <typename T> using v = vector<T>;

template <typename T> void RD_VC(v<T> &a, int n) {}

// You are given a rectangle with its bottom-left vertex at the origin of the
// cartesian plane and the top-right vertex at X Y. You are at the top-left
// corner and need to reach the bottom-right corner. There are N obstacles in
// the form of circles. You cannot pass through any circle. You cannot move on
// the edge of the rectangle or a circle. Find out if it is possible to reach
// the destination.

// Note: Centers of all circles lie within the rectangle.
bool solve(int x, int y, v<tuple<int, int, int>> &a) {
  int n = a.size();
  REP(i, n) {
    int x1 = get<0>(a[i]);
    int y1 = get<1>(a[i]);
    int r = get<2>(a[i]);
    if (x1 - r <= x && x <= x1 + r && y1 - r <= y && y <= y1 + r)
      return false;
  }
  return true;
}

// generated by oj-template v4.8.1
// (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int t;
  cin >> t;
  while (t--) {
    int x, y, n;
    cin >> x >> y >> n;
    v<tuple<int, int, int>> a(n);
    REP(i, n) {
      int x1, y1, r;
      cin >> x1 >> y1 >> r;
    }
    cout << (solve(x, y, a) ? "YES" : "NO") << endl;
  }
  return 0;
}
