#include <algorithm>
#include <bits/stdc++.h>
#include <unordered_map>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define PB push_back
#define SH std::cout <<
#define LN << '\n'
#define RD std::cin >>
#define va std::vector<auto>

using namespace std;
typedef std::vector<int> vi;
template <typename _A, typename _B> using umap = unordered_map<_A, _B>;
template <typename T> using v = vector<T>;

template <typename T> void RD_VC(v<T> &a, int n) {}

int solve(vi &a) {
  // size < 2, are always solvable in 0 moves
  if (a.size() < 2)
    return 0;

  umap<int, int> u;
  int max = 0;

  for (int x : a) {
    u[x]++;
    if (u[x] > max) {
      max = u[x];
    }
  }

  int freq = max;
  // only element is only repeated once so it is not possible to solve
  if (freq == 1)
    return -1;
  // all other rows needs to be removed, and one op per row
  int left = a.size() - freq;
  return left == 0 ? 0: left + 1;
}

// generated by oj-template v4.8.1
// (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int t, n;
  vi v;
  cin >> t;
  REP(_, t) {
    cin >> n;
    v.clear();
    for (int i = 0; i < n; i++) {
      int t;
      cin >> t;
      v.push_back(t);
    }
    std::cout << solve(v) << endl;
  }
  return 0;
}
