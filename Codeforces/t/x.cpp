#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define PB push_back
#define SH std::cout <<
#define LN << '\n'
#define RD std::cin >>
#define va std::vector<auto>

using namespace std;
typedef std::vector<int> vi;
template <typename _A, typename _B> using umap = unordered_map<_A, _B>;
template <typename T> using v = vector<T>;

template <typename T> void RD_VC(v<T> &a, int n) {}

int64_t solve(vi &a) {
  int min = *min_element(a.begin(), a.end());
  // make all numbers positive
  if (min < 0) {
    REP(i, a.size()) { a[i] += -min; }
  }

  int sum = std::accumulate(a.begin(), a.end(), 0);

  int l = 1;
  int r = a.size() - 2;
  int64_t sum_l = a[0];
  int64_t sum_r = a[a.size() - 1];
  int cnt = 0;
  while (l <= r) {
    if (sum_l < sum_r) {
      sum_l += a[l];
      l++;
    } else if (sum_l > sum_r) {
      sum_r += a[r];
      r--;
    } else if (sum_l == sum_r) {
      if (sum_l * 3 == sum)
        cnt++;
      if (a[r] == 0) {
        r--;
      } else {
        sum_l += a[l];
        l++;
      }
    }
  }
  return cnt;
}

// generated by oj-template v4.8.1
// (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int n;
  std::cin >> n;
  vi a(n);
  REP(i, n) { std::cin >> a[i]; }
  auto ans = solve(a);
  std::cout << ans << '\n';
  return 0;
}
